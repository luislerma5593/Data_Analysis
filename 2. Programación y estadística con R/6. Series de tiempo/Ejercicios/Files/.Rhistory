ps <- c(mean - 3*sd, mean - 2*sd, mean - sd, mean, mean + sd, mean + 2*sd, mean + 3*sd)
axis(side = 1, at = ps)
x0 <- NULL
for(i in 1:length(ps)-1) x0 <- c(x0, (ps[i]+ps[i+1])/2)
y0 <- dnorm(x0, mean, sd)*1/3
text(x = x0, y = y0, labels = c("2.35%", "13.5%", "34%", "34%", "13.5%", "2.35%"))
x1 <- (x[1]+ps[1])/2; y1 <- dnorm(mean, mean, sd)*1/2
xf <- (x[length(x)]+ps[length(ps)])/2; yf <- dnorm(mean, mean, sd)*1/2
text(x = c(x1, xf), y = c(y1, yf), labels = c("0.15%", "0.15%"))
segments(x0 = x1, y0 = 0, x1 = x1, y1 = y1,               # Draw one line as in Example 1
col = "cornflowerblue",                               # Color of line
lwd = 5,                                              # Thickness of line
lty = "dotted")
segments(x0 = xf, y0 = 0, x1 = xf, y1 = yf,
col = "cornflowerblue",
lwd = 5,
lty = "dotted")
x <- seq(-4, 4, 0.01) # Algunos valores que puede tomar la v.a. T con 7 gl
y <- dt(x, df = 7) # Valores correspondientes de la densidad t de Student con 7 gl
plot(x, y, type = "l", main = "Densidad t de Student, gl = 7", xlab="", ylab="")
abline(v = 0, lwd=2, lty=2)
pt(q = 1.5, df = 7)
plot(x, y, type = "l", main = "Densidad t de Student, gl = 7", xlab="", ylab="")
polygon(c(min(x), x[x<=1.5], 1.5), c(0, y[x<=1.5], 0), col="purple")
pt(q = 2, df = 7, lower.tail = FALSE)
plot(x, y, type = "l", main = "Densidad t de Student, gl = 7", xlab="", ylab="")
polygon(c(2, x[x>=2], max(x)), c(0, y[x>=2], 0), col="orange")
(d <- qt(p = 0.025, df = 7))
pt(q = d, df = 7)
plot(x, y, type = "l", main = "Densidad t de Student, gl = 7", xlab="", ylab="")
axis(side = 1, at = d, font = 2, padj = 1, lwd = 2)
set.seed(777) # Para poder reproducir la muestra en el futuro
muestra <- rt(n = 1000, df = 7)
length(muestra); mdf <- as.data.frame(muestra)
tail(mdf)
ggplot(mdf, aes(muestra)) +
geom_histogram(colour = 'green',
fill = 'orange',
alpha = 0.7, # Intensidad del color fill
binwidth = 0.5) +
geom_density(aes(y = 0.5*..count..))+
geom_vline(xintercept = mean(mdf$muestra), linetype="dashed", color = "black") +
ggtitle('Histograma para la muestra t de Student') +
labs(x = 'Valores obtenidos', y = 'Frecuencia')+
theme_light() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
library(ggplot2)
x <- seq(0, 5, 0.02)
plot(x, dexp(x, rate = 2), type = "l", lwd = 2, ylab = "")
title(main = "FunciÃ³n de Densidad Exponencial", ylab = "f(x)",
sub = expression("ParÃ¡metro " ~ lambda == 2))
text(x = 3, y = 1.5, labels = expression(f(x)==2*exp(-2*x) ~ " para x "  >= 0))
text(x = 3, y = 1.3, labels = paste("0 en otro caso"))
text(x = 1, y = 1, labels = expression("E(X) = " ~ 1/lambda == 1/2), col = 2)
text(x = 3, y = 0.5, labels = expression("DE(X) = " ~ 1/lambda == 1/2), col = 4)
set.seed(10) # Para reproducir posteriormente la muestra
(m1.4 <- rexp(n = 4, rate = 2))
mean(m1.4)
set.seed(64) # Para reproducir las muestras en el futuro
(m5.3 <- sapply(X = rep(3, 5), FUN = rexp, 2))
(media5.3 <- apply(m5.3, 2, mean))
set.seed(465) # Para reproducir las muestras en el futuro
m1000.7 <- sapply(X = rep(7, 1000), FUN = rexp, 2)
media1000.7 <- apply(m1000.7, 2, mean)
mdf <- as.data.frame(media1000.7)
tail(mdf)
ggplot(mdf, aes(media1000.7)) +
geom_histogram(colour = 'green',
fill = 'orange',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(media1000.7), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1000 medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean(media1000.7); 1/2 # Media de las 1000 medias y media de la poblaciÃ³n de la cual vienen las 1000 muestras
sd(media1000.7); (1/2)/sqrt(7) # DE de las 1000 medias y DE de la poblaciÃ³n de la cual vienen las 1000 muestras dividida por la raÃ­z del tamaÃ±o de la muestra
set.seed(4465) # Para reproducir las muestras en el futuro
m1000.33 <- sapply(X = rep(33, 1000), FUN = rexp, 2)
media1000.33 <- apply(m1000.33, 2, mean)
mdf <- as.data.frame(media1000.33)
tail(mdf)
ggplot(mdf, aes(media1000.33)) +
geom_histogram(colour = 'yellow',
fill = 'purple',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(media1000.33), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1000 medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_get() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean(media1000.33); 1/2 # Media de las 1000 medias y media de la poblaciÃ³n de la cual vienen las 1000 muestras
sd(media1000.33); (1/2)/sqrt(33) # DE de las 1000 medias y DE de la poblaciÃ³n de la cual vienen las 1000 muestras dividida por la raÃ­z del tamaÃ±o de la muestra
set.seed(543465) # Para reproducir las muestras en el futuro
m1000.400 <- sapply(X = rep(400, 1000), FUN = rexp, 2)
media1000.400 <- apply(m1000.400, 2, mean)
mdf <- as.data.frame(media1000.400)
tail(mdf)
ggplot(mdf, aes(media1000.400)) +
geom_histogram(colour = 'orange',
fill = 'gray',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(media1000.400), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1000 medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_gray() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean(media1000.400); 1/2 # Media de las 1000 medias y media de la poblaciÃ³n de la cual vienen las 1000 muestras
sd(media1000.400); (1/2)/sqrt(400) # DE de las 1000 medias y DE de la poblaciÃ³n de la cual vienen las 1000 muestras dividida por la raÃ­z del tamaÃ±o de la muestra
library(ggplot2)
x <- seq(0, 5, 0.02)
plot(x, dexp(x, rate = 3), type = "l", lwd = 2, ylab = "")
title(main = "FunciÃ³n de Densidad Exponencial", ylab = "f(x)",
sub = expression("ParÃ¡metro " ~ lambda == 3))
text(x = 3, y = 1.3, labels = paste("0 en otro caso"))
text(x = 1, y = 1, labels = expression("E(X) = " ~ 1/lambda == 1/3), col = 2)
text(x = 3, y = 0.5, labels = expression("DE(X) = " ~ 1/lambda == 1/3), col = 4)
set.seed(65) # Para reproducir las muestras en el futuro
m1200.350 <- sapply(X = rep(350, 1200), FUN = rexp, rate = 3)
media1200.350 <- apply(m1200.350, 2, mean)
mdf <- as.data.frame(media1200.350)
tail(mdf)
ggplot(mdf, aes(media1200.350)) +
geom_histogram(colour = 'yellow',
fill = 'purple',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(media1200.350), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1200 medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_get() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean(media1200.350); 1/3 # Media de las 1200 medias y media de la poblaciÃ³n de la cual provienen las 1200 muestras
sd(media1200.350); (1/3)/sqrt(350) # DE de las 1200 medias y DE de la poblaciÃ³n de la cual provienen las 1200 muestras dividida por la raÃ­z del tamaÃ±o de las muestras
set.seed(345)
sample(x = c(0, 1), size = 1, prob = c(0.45, 0.55))
rbinom(n = 1, size = 1, prob = 0.55)
set.seed(5434) # Para reproducir las muestras en el futuro
m1000.31 <- sapply(X = rep(31, 1000), FUN = function(n) sample(x = c(0, 1), size = n, replace = TRUE, prob = c(0.45, 0.55)))
media1000.31 <- apply(m1000.31, 2, mean)
mdf <- as.data.frame(media1000.31)
tail(mdf)
ggplot(mdf, aes(media1000.31)) +
geom_histogram(colour = 'orange',
fill = 'blue',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(media1000.31), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1000 medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_grey() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean(media1000.31); 0.55 # Media de las 1000 medias y media de la poblaciÃ³n de la cual provienen las 1000 muestras
sd(media1000.31); sqrt(0.55*0.45)/sqrt(31) # DE de las 1000 medias y DE de la poblaciÃ³n de la cual provienen las 1000 muestras dividida por la raÃ­z del tamaÃ±o de la muestra
set.seed(65) # Para reproducir las muestras en el futuro
m1150.54 <- sapply(X = rep(54, 1150), FUN = rexp, rate = 3.2)
media1150.54 <- apply(m1150.54, 2, mean)
m1150.41 <- sapply(X = rep(41, 1150), FUN = rexp, rate = 1.5)
media1150.41 <- apply(m1150.41, 2, mean)
dif.medias <- media1150.54 - media1150.41 # Diferencia de medias
dmdf <- as.data.frame(dif.medias)
tail(dmdf)
ggplot(dmdf, aes(dif.medias)) +
geom_histogram(colour = 'orange',
fill = 'red',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(dif.medias), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1000 diferencias de medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_grey() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean(dif.medias); 1/3.2-1/1.5 # Media de las 1150 diferencias de medias y diferencia de medias de las poblaciones de las cuales provienen las 11500 muestras
sd(dif.medias); sqrt((1/3.2^2)/54 + (1/1.5^2)/41) # DE de las 1150 diferencias de medias y DE dada en literatura
set.seed(7434) # Para reproducir las muestras en el futuro
m1100.48 <- sapply(X = rep(48, 1100), FUN = function(n) sample(x = c(0, 1), size = n, replace = TRUE, prob = c(0.35, 0.65)))
m1100.35 <- sapply(X = rep(35, 1100), FUN = function(n) sample(x = c(0, 1), size = n, replace = TRUE, prob = c(0.47, 0.53)))
media1100.48 <- apply(m1100.48, 2, mean)
media1100.35 <- apply(m1100.35, 2, mean)
dif.medias <- media1100.48 - media1100.35
dmdf <- as.data.frame(dif.medias)
tail(dmdf)
ggplot(dmdf, aes(dif.medias)) +
geom_histogram(colour = 'pink',
fill = 'blue',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(dif.medias), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1100 diferencias de medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_grey() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
set.seed(104)
muestra <- rexp(n = 40, rate = 6) # media = 1/6 aprox 0.1667 (media de la poblaciÃ³n)
tail(as.data.frame(muestra))
# Z = (promedio-Mu)/(sigma/sqrt(n))
z0 <- (mean(muestra)-0.1)/(sd(muestra)/sqrt(40))
#mean(muestra)=0.21
z0
(z.05 <- qnorm(p = 0.05, lower.tail = FALSE))
z0 > z.05
(pvalue <- pnorm(z0, lower.tail = FALSE))
x <- seq(-4, 4, 0.01)
y <- dnorm(x)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad normal estándar", sub = expression(paste(mu == 0, " y ", sigma == 1)))
polygon(c(z0, x[x>=z0], max(x)), c(0, y[x>=z0], 0), col="red")
axis(side = 1, at = z0, font = 2, padj = 1, lwd = 2)
set.seed(174)
muestra <- sample(x = c(1, 0), size = 45, replace = TRUE, prob = c(0.67, 0.33)); 0.67 # media real de la poblaciÃ³n
tail(as.data.frame(muestra))
z0 <- (mean(muestra)-0.9)/sqrt((0.9*(1-0.9))/45)
#mean(muestra)=0.57
z0 # Es -7.2
(z.05 <- qnorm(p = 0.05))
z0 < z.05
(pvalue <- pnorm(z0)) # p-value muy pequeÃ±o
set.seed(174376)
m1 <- rexp(n = 56, rate = 4.1); 1/4.1 # media real de la poblaciÃ³n
tail(as.data.frame(m1))
m2 <- rexp(n = 63, rate = 3.4); 1/3.4 # media real de la poblaciÃ³n
tail(as.data.frame(m2))
1/4.1-1/3.4 # diferencia de medias real
z0 <- (mean(m1)-mean(m2)-0)/sqrt(var(m1)/56 + var(m2)/63)
z0 # 0.693
(z.025 <- qnorm(p = 0.025, lower.tail = FALSE))
(z0 < -z.025) | (z0 > z.025)
(pvalue <- 2*pnorm(z0, lower.tail = FALSE))
x <- seq(-4, 4, 0.01)
y <- dnorm(x)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad normal estÃ¡ndar", sub = expression(paste(mu == 0, " y ", sigma == 1)))
polygon(c(min(x), x[x<=-z0], -z0), c(0, y[x<=-z0], 0), col="purple")
axis(side = 1, at = -z0, font = 2, padj = 1, lwd = 2)
polygon(c(z0, x[x>=z0], max(x)), c(0, y[x>=z0], 0), col="purple")
axis(side = 1, at = z0, font = 2, padj = 1, lwd = 2)
set.seed(124)
muestra <- rnorm(n = 15, mean = 175, sd = 6)
tail(as.data.frame(muestra))
t0 <- (mean(muestra)-170)/(sd(muestra)/sqrt(15))
t0
(t.05 <- qt(p = 0.05, df = 14, lower.tail = FALSE))
t0 > t.05
(pvalue <- pt(t0, df = 14, lower.tail = FALSE))
x <- seq(-5, 5, 0.01)
y <- dt(x, df = 14)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad t de Student, 14 gl")
polygon(c(t0, x[x>=t0], max(x)), c(0, y[x>=t0], 0), col="red")
axis(side = 1, at = t0, font = 2, padj = 1, lwd = 2)
t.test(x = muestra,
alternative = "greater",
mu = 170)
set.seed(104)
muestra <- rexp(n = 40, rate = 6) # media = 1/6 aprox 0.1667 (media de la poblaciÃ³n)
tail(as.data.frame(muestra))
# Z = (promedio-Mu)/(sigma/sqrt(n))
z0 <- (mean(muestra)-0.1)/(sd(muestra)/sqrt(40))
#mean(muestra)=0.21
z0
(z.05 <- qnorm(p = 0.05, lower.tail = FALSE))
(z.05 <- qnorm(p = 0.05, lower.tail = TRUE))
(z.05 <- qnorm(p = 0.05, lower.tail = FALSE))
?qnorm
(pvalue <- pnorm(z0, lower.tail = FALSE))
suppressMessages(suppressWarnings(library(dplyr)))
suppressMessages(suppressWarnings(library(e1071)))
suppressMessages(suppressWarnings(library(ggplot2)))
suppressMessages(suppressWarnings(library(ISLR)))
?Default
head(Default)
tail(Default)
dim(Default)
str(Default)
ggplot(Default, aes(x = balance, y = income, colour = default)) +
geom_point() + facet_wrap('student') +
theme_grey() + ggtitle("Datos Default")
set.seed(2020)
train = sample(nrow(Default),
round(nrow(Default)/2))
tail(Default[train, ])
ggplot(Default[train, ],
aes(x = balance, y = income, colour = default)) +
geom_point() + facet_wrap('student') +
theme_dark() + ggtitle("Conjunto de entrenamiento")
ggplot(Default[-train, ],
aes(x = balance, y = income, colour = default)) +
geom_point() + facet_wrap('student') +
theme_light() + ggtitle("Conjunto de prueba")
ggplot(Default[train, ],
aes(x = balance, y = income, colour = default)) +
geom_point() + facet_wrap('student') +
theme_dark() + ggtitle("Conjunto de entrenamiento")
ggplot(Default[-train, ],
aes(x = balance, y = income, colour = default)) +
geom_point() + facet_wrap('student') +
theme_light() + ggtitle("Conjunto de prueba")
best <- svm(default~.,  data = Default[train,],
kernel = "radial",
cost = 100,
gamma = 1.51
)
mc <- table(true = Default[-train, "default"],
pred = predict(best,
newdata = Default[-train,]))
mc
round(sum(diag(mc))/sum(colSums(mc)), 5)
rs <- apply(mc, 1, sum)
r1 <- round(mc[1,]/rs[1], 5)
r2 <- round(mc[2,]/rs[2], 5)
rbind(No=r1, Yes=r2)
fit <- svm(default ~ ., data = Default[train,],
kernel = "radial", cost = 100, gamma = 1.51,
decision.values = TRUE)
fitted <- attributes(predict(fit, Default[-train,],
decision.values = TRUE))$decision.values
eti <- ifelse(fitted < 0, "Yes", "No")
mc <- table(true = Default[-train, "default"],
pred = eti)
mc
round(sum(diag(mc))/sum(colSums(mc)), 5)
rs <- apply(mc, 1, sum)
r1 <- round(mc[1,]/rs[1], 5)
r2 <- round(mc[2,]/rs[2], 5)
rbind(No=r1, Yes=r2)
eti <- ifelse(fitted < 1.002, "Yes", "No")
mc <- table(true = Default[-train, "default"],
pred = eti)
mc
round(sum(diag(mc))/sum(colSums(mc)), 5)
rs <- apply(mc, 1, sum)
r1 <- round(mc[1,]/rs[1], 5)
r2 <- round(mc[2,]/rs[2], 5)
rbind(No=r1, Yes=r2)
# install.packages("e1071") para instalarlo
library(e1071)
set.seed(754)
x <- matrix(rnorm(30*2), ncol = 2)
y <- c(rep(-1, 15), rep(1, 15))
x[y == 1, ] <- x[y == 1, ] + 1
plot(x, col = (3-y), pch = 16)
dat <- data.frame(x = x, y = as.factor(y))
tail(dat)
svmfit <- svm(y~., data = dat, kernel = "linear",
cost = 10, scale = FALSE)
plot(svmfit, dat)
svmfit$index
length(svmfit$index)
summary(svmfit)
svmfit <- svm(y~., data = dat, kernel = "linear",
cost = 0.1, scale = FALSE)
plot(svmfit, dat)
length(svmfit$index)
svmfit$index
set.seed(524)
tune.out <- tune(svm, y~., data = dat, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
summary(tune.out)
bestmod <- tune.out$best.model
summary(bestmod)
xtest <- matrix(rnorm(45*2), ncol = 2)
ytest <- sample(c(-1, 1), 45, rep = TRUE)
xtest[ytest == 1, ] <- xtest[ytest == 1, ] + 1
testdat <- data.frame(x = xtest, y = as.factor(ytest))
tail(testdat)
ypred <- predict(bestmod, testdat)
table(predict = ypred, truth = testdat$y)
set.seed(6891)
x <- matrix(rnorm(200*2), ncol = 2)
x[1:100,] <- x[1:100,] + 2
x[101:150,] <- x[101:150,] - 2
y <- c(rep(1, 150), rep(2, 50))
dat <- data.frame(x = x, y = as.factor(y))
head(dat)
plot(x, col = y, pch = 16)
train <- sample(200, 100)
tail(as.data.frame(train))
svmfit <- svm(y~., data = dat[train, ],
kernel = "radial", gamma = 1, cost = 1)
plot(svmfit, dat[train, ])
summary(svmfit)
svmfit <- svm(y~., data = dat[train, ],
kernel = "radial", gamma = 1, cost = 1e5)
plot(svmfit, dat[train, ])
set.seed(1980)
tune.out <- tune(svm, y~., data = dat[train, ], kernel = "radial",
ranges = list(cost = c(0.1, 1, 10, 100, 1000),
gamma = c(0.5, 1, 2, 3, 4)))
summary(tune.out)
table(true = dat[-train, "y"],
pred = predict(tune.out$best.model, newdata = dat[-train,]))
library(ggplot2)
x <- seq(0, 5, 0.02)
plot(x, dexp(x, rate = 2), type = "l", lwd = 2, ylab = "")
title(main = "FunciÃ³n de Densidad Exponencial", ylab = "f(x)",
sub = expression("ParÃ¡metro " ~ lambda == 2))
text(x = 3, y = 1.5, labels = expression(f(x)==2*exp(-2*x) ~ " para x "  >= 0))
text(x = 3, y = 1.3, labels = paste("0 en otro caso"))
text(x = 1, y = 1, labels = expression("E(X) = " ~ 1/lambda == 1/2), col = 2)
text(x = 3, y = 0.5, labels = expression("DE(X) = " ~ 1/lambda == 1/2), col = 4)
setwd("C:/Users/LLerma/Google Drive/Analisis de Datos/M2 - Programacion y Estadistica con R/S5/Files")
nyc <- read.csv("nyc.csv", header = TRUE)
head(nyc, 2); tail(nyc, 2); dim(nyc)
#detach(x)
attach(nyc)
(m1 <- lm(Price ~ Food + Decor + Service + East))
summary(m1)
m2 <- lm(Price ~ Food + Decor + East)
summary(m2)
m2 <- update(m1, ~.-Service)
summary(m2)
mfull <- lm(Price ~ Food + Decor + Service + East +
Food:East + Decor:East + Service:East)
summary(mfull)
anova(m2,mfull)
pairs(~ Food + Decor + Service, data = nyc, gap = 0.4, cex.labels = 1.5)
m1 <- lm(Price ~ Food + Decor + Service + East)
summary(m1)
StanRes1 <- rstandard(m1)
par(mfrow = c(2, 2))
plot(Food, StanRes1, ylab = "Residuales Estandarizados")
plot(Decor, StanRes1, ylab = "Residuales Estandarizados")
plot(Service, StanRes1, ylab = "Residuales Estandarizados")
plot(East, StanRes1, ylab = "Residuales Estandarizados")
dev.off()
plot(m1$fitted.values, Price, xlab = "Valores ajustados", ylab = "Price")
abline(lsfit(m1$fitted.values, Price))
library(TSA)
setwd("C:/Users/LLerma/Google Drive/Analisis de Datos/M2 - Programacion y Estadistica con R/S6/Files")
data(oilfilters)
plot(oilfilters, type = "o", ylab = "Ventas", xlab = "Tiempo", main = "Ventas Mesuales ")
plot(oilfilters, type = "l", ylab = "Ventas", xlab = "Tiempo",
main = "Ventas Mensuales de Filtro de Aceite",
sub = "Símbolos Especiales")
#Agregar las iniciales del mes en cada uno de los puntos
points(y = oilfilters, x = time(oilfilters),
pch = as.vector(season(oilfilters)))
data(AirPassengers)
AP <- AirPassengers
AP
class(AP)
start(AP); end(AP); frequency(AP)
summary(AP)
plot(AP, ylab = "Pasajeros (1000's)", xlab = "Tiempo",
main = "Reserva de pasajeros aéreos internacionales",
sub = "Estados Unidos en el periodo 1949-1960")
layout(1:2)
plot(aggregate(AP, nfrequency = 1), xlab = "Tiempo",
main = "Reserva de pasajeros aÃ©reos internacionales",
sub = "Estados Unidos en el periodo 1949-1960")
boxplot(AP ~ cycle(AP),
xlab = "Boxplot de valores estacionales",
sub = "Estados Unidos en el periodo 1949-1960",
main = "Reserva de pasajeros aÃ©reos internacionales")
dev.off()
CBE <- read.csv("cbe.csv", header = TRUE)
CBE[1:4,]
class(CBE)
plot(CBE)
Elec.ts <- ts(CBE[, 3], start = 1958, freq = 12)
Beer.ts <- ts(CBE[, 2], start = 1958, freq = 12)
Choc.ts <- ts(CBE[, 1], start = 1958, freq = 12)
plot(cbind(Elec.ts, Beer.ts, Choc.ts),
main = "ProducciÃ³n de Chocolate, Cerveza y Electricidad",
xlab = "Tiempo",
sub = "Enero de 1958 - Diciembre de 1990")
Global <- scan("global.txt")
Global.ts <- ts(Global, st = c(1856, 1), end = c(2005, 12), fr = 12)
Global.annual <- aggregate(Global.ts, FUN = mean)
plot(Global.ts, xlab = "Tiempo", ylab = "Temperatura en ÃÂ°C", main = "Serie de Temperatura Global",
sub = "Serie mensual: Enero de 1856 a Diciembre de 2005")
plot(Global.annual, xlab = "Tiempo", ylab = "Temperatura en ÃÂ°C", main = "Serie de Temperatura Global",
sub = "Serie anual de temperaturas medias: 1856 a 2005")
plot(Global.ts, xlab = "Tiempo", ylab = "Temperatura en ÃÂ°C", main = "Serie de Temperatura Global",
sub = "Serie mensual: Enero de 1856 a Diciembre de 2005")
plot(Global.annual, xlab = "Tiempo", ylab = "Temperatura en ÃÂ°C", main = "Serie de Temperatura Global",
sub = "Serie anual de temperaturas medias: 1856 a 2005")
New.series <- window(Global.ts, start = c(1970, 1), end = c(2005, 12))
New.time <- time(New.series)
plot(New.series, xlab = "Tiempo", ylab = "Temperatura en ÃÂ°C", main = "Serie de Temperatura Global",
sub = "Serie mensual: Enero de 1970 a Diciembre de 2005"); abline(reg = lm(New.series ~ New.time))
# Se debe elegir entre el modelo aditivo o el modelo multiplicativo cuando sea razonable suponer la descomposiciÃ³n
Elec.decom.A <- decompose(Elec.ts)
plot(Elec.decom.A, xlab = "Tiempo",
sub = "DescomposiciÃ³n de los datos de producciÃ³n de electricidad")
Tendencia <- Elec.decom.A$trend
Estacionalidad <- Elec.decom.A$seasonal
Aleatorio <- Elec.decom.A$random
ts.plot(cbind(Tendencia, Tendencia + Estacionalidad+Aleatorio),
xlab = "Tiempo", main = "Datos de ProducciÃ³n de Electricidad",
ylab = "ProducciÃ³n de electricidad", lty = 1:2,
sub = "Tendencia con efectos estacionales aditivos sobrepuestos")
plot(Elec.decom.A, xlab = "Tiempo",
sub = "DescomposiciÃ³n de los datos de producciÃ³n de electricidad")
Tendencia <- Elec.decom.A$trend
Estacionalidad <- Elec.decom.A$seasonal
Aleatorio <- Elec.decom.A$random
ts.plot(cbind(Tendencia, Tendencia + Estacionalidad+Aleatorio),
xlab = "Tiempo", main = "Datos de ProducciÃ³n de Electricidad",
ylab = "ProducciÃ³n de electricidad", lty = 1:2,
sub = "Tendencia con efectos estacionales aditivos sobrepuestos")
Tendencia[20] + Estacionalidad[20] + Aleatorio[20]
Elec.ts[20]
Elec.decom.M <- decompose(Elec.ts, type = "mult")
plot(Elec.decom.M, xlab = "Tiempo",
sub = "DescomposiciÃ³n de los datos de producciÃ³n de electricidad")
Trend <- Elec.decom.M$trend
Seasonal <- Elec.decom.M$seasonal
Random <- Elec.decom.M$random
ts.plot(cbind(Trend, Trend*Seasonal), xlab = "Tiempo", main = "Datos de ProducciÃ³n de Electricidad",
ylab = "ProducciÃ³n de electricidad", lty = 1:2,
sub = "Tendencia con efectos estacionales multiplicativos sobrepuestos")
Trend[20]*Seasonal[20]*Random[20]
Elec.ts[20]
Trend[100]*Seasonal[100]*Random[100]
Elec.ts[100]
