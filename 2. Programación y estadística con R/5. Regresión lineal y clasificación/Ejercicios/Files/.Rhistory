title(main="jo",xlab ="jj")
plot(x =df2$num, y=rev(df2$O2), type = "l", title="jok")
plot(x =df2$num, y=rev(df2$O2), type = "l")
plot(x =df2$num, y=rev(df2$O2), type = "l", main="jok")
plot(x =df2$num, y=rev(df2$O2), type = "l", main="jok", xlab="kk")
plot(x =df2$num, y=rev(df2$O2), type = "l", main="jok", xlab="")
plot(x =df2$num, y=rev(df2$O2), type = "l", main="jok", xlab="", ylab="O2")
plot(x =df2$num, y=rev(df2$O2), type = "l", main="Oxygen", xlab="", ylab="O2")
plot(x =df2$num, y=rev(df2$N2), type = "l", main="Nittrogen", xlab="", ylab="N2")
df2 = read.csv("C:/Users/LLerma/OneDrive - Ami/AMI/VM2/Ajustes/Petersburg EAF & LMF - Import Kelman Data/Petersburg EAF - LTC Data.csv", header = T)
df2$num <- c(1:446)
plot(x =df2$num, y=rev(df2$O2), type = "l", main="Oxygen", xlab="", ylab="O2")
(milista <- list(nombre = "Pepe", no.hijos = 3, edades.hijos = c(4, 7, 9)))
View(milista)
#Almacenalo en un data frame que se llame amazon.best
amazon.best <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-con-R-Santander/master/Sesion-01/Data/bestsellers%20with%20categories.csv
")
#Calcula el data frame transpuesto, asÃ­gnale el nombre de tAmazon y conviÃ©rtelo en un data frame (Hint: consulta la ayuda sobre las funciones t y as.data.frame)
tAmazon <- as.data.frame(t(amazon.best))
#Usa el nombre de los libros como el nombre de las columnas (Hint: consulta la documentaciÃ³n de names, tienes que hacer algo similar a names(dataframe) <- vector de nuevos nombres)
names(tAmazon) <- amazon.best$Name
#Â¿CÃºal es el libro de menor y mayor precio?
max(amazon.best$Price)
min(amazon.best$Price)
ran <- sample(44)
ran2<-ran
for (i in 1:15) {
ran2[i] <- (ran[i]**3)+12
}
df.al <- data.frame(ran,ran2)
View(df.al)
mi
cls
c
clear
x = c(4000, 9000, 9000, 10000); mean(x)
summary(1:100)
summary(mtcars)
url1 <- "https://data.humdata.org/hxlproxy/data/download/time_series_covid19_confirmed_global_narrow.csv?dest=data_edit&filter01=explode&explode-header-att01=date&explode-value-att01=value&filter02=rename&rename-oldtag02=%23affected%2Bdate&rename-newtag02=%23date&rename-header02=Date&filter03=rename&rename-oldtag03=%23affected%2Bvalue&rename-newtag03=%23affected%2Binfected%2Bvalue%2Bnum&rename-header03=Value&filter04=clean&clean-date-tags04=%23date&filter05=sort&sort-tags05=%23date&sort-reverse05=on&filter06=sort&sort-tags06=%23country%2Bname%2C%23adm1%2Bname&tagger-match-all=on&tagger-default-tag=%23affected%2Blabel&tagger-01-header=province%2Fstate&tagger-01-tag=%23adm1%2Bname&tagger-02-header=country%2Fregion&tagger-02-tag=%23country%2Bname&tagger-03-header=lat&tagger-03-tag=%23geo%2Blat&tagger-04-header=long&tagger-04-tag=%23geo%2Blon&header-row=1&url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_confirmed_global.csv"
url2 <- "https://data.humdata.org/hxlproxy/data/download/time_series_covid19_deaths_global_narrow.csv?dest=data_edit&filter01=explode&explode-header-att01=date&explode-value-att01=value&filter02=rename&rename-oldtag02=%23affected%2Bdate&rename-newtag02=%23date&rename-header02=Date&filter03=rename&rename-oldtag03=%23affected%2Bvalue&rename-newtag03=%23affected%2Binfected%2Bvalue%2Bnum&rename-header03=Value&filter04=clean&clean-date-tags04=%23date&filter05=sort&sort-tags05=%23date&sort-reverse05=on&filter06=sort&sort-tags06=%23country%2Bname%2C%23adm1%2Bname&tagger-match-all=on&tagger-default-tag=%23affected%2Blabel&tagger-01-header=province%2Fstate&tagger-01-tag=%23adm1%2Bname&tagger-02-header=country%2Fregion&tagger-02-tag=%23country%2Bname&tagger-03-header=lat&tagger-03-tag=%23geo%2Blat&tagger-04-header=long&tagger-04-tag=%23geo%2Blon&header-row=1&url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_deaths_global.csv"
download.file(url = url1, destfile = "st19ncov-confirmados.csv", mode = "wb")
download.file(url = url2, destfile = "st19ncov-muertes.csv", mode = "wb")
conf <- read.csv("st19ncov-confirmados.csv")
mu <- read.csv("st19ncov-muertes.csv")
str(conf); str(mu)
head(conf); head(mu)
Sconf <- conf[-1,]
Smu <- mu[-1,]
Sconf <- select(Sconf, Country.Region, Date, Value) # PaÃ­s, fecha y acumulado de infectados
Sconf <- rename(Sconf, Pais = Country.Region, Fecha = Date, Infectados = Value)
str(Sconf)
suppressMessages(suppressWarnings(library(dplyr)))
Sconf <- select(Sconf, Country.Region, Date, Value) # PaÃ­s, fecha y acumulado de infectados
Sconf <- rename(Sconf, Pais = Country.Region, Fecha = Date, Infectados = Value)
str(Sconf)
a=cbind(1:10, 11:20, 21:30)
a=cbind(1:10, 11:20, 21:30)
View(a)
(cbind(1:10, matrix(11:30, ncol =2)))
(cbind(data.frame(x = 1:10, y = 11:20), z = 21:30))
(cbind(1:10, matrix(11:30, ncol =2)))
(cbind(data.frame(x = 1:10, y = 11:20), z = 21:30))
df1 <- data.frame(x = 1:5, y = 6:10, z = 16:20)
df2 <- data.frame(x = 51:55, y = 101:105, z = 151:155)
df1; df2
rbind(df1, df2)
cbind(df1, df2)
rbind(df1, df2)
getwd()
setwd("C:/Users/LLerma/Google Drive/Analisis de Datos/M2 - Programacion y Estadistica con R/S2/Files/FutEsp")
dir()
head(airquality)
library(dplyr)
str(airquality)
dim(airquality)
bien <- complete.cases(airquality)
head(airquality)
library(dplyr)
str(airquality)
dim(airquality)
bien <- complete.cases(airquality)
sum(bien)
library(ggplot2)
names(mtcars)
ggplot(mtcars, aes(x=cyl, y = hp, colour = mpg )) + geom_point() #Para puntos
names(mtcars)
p<-ggplot(mtcars, aes(x=cyl, y = hp, colour = mpg )) +
geom_point() +
theme_gray() +   # Temas (inteta cambiarlo)
facet_wrap("cyl")  # Lo divide por el nÃºm de cilindros
library(plotly)
cars<-mtcars
cars$name<-row.names(mtcars)
q<-ggplot(cars, aes(x=cyl, y = hp, colour = name )) +
geom_point() +
theme_gray() +   # Temas (inteta cambiarlo)
facet_wrap("cyl")
ggplotly(q) # Ya con los nombres
setwd("C:/Users/LLerma/Google Drive/Analisis de Datos/M2 - Programacion y Estadistica con R/S3/Files")
data <- read.csv("cbe.csv")
setwd("C:\Users\LLerma\Documents\GitHub\Data_Analysis\2. Programación y estadística con R\3. Análisis exploratorio de datos (AED o EDA) con R\Ejercicios\Files\")
# 1 Importa los datos de producción de electricidad que se encuentra en el archivo cbe.csv a R
data <- read.csv("cbe.csv")
# 2 Crea la serie de tiempo mensual de producción de electricidad en R a partir del año 1958
(datats <- ts(data$elec, start=1958, frequency=12))
start(datats); end(datats); frequency(datats)
# Frequency
# 1 ??? Annual
# 4 ??? Quarterly
# 12 ??? Monthly
# 52 ??? Weekly
# 3 Realiza la descomposiciÃ³n multiplicativa de la serie de tiempo y grafica la serie original junto con sus componentes (tendencia, estacionalidad y componente aleatoria)
tsm <- decompose(datats, type = "multiplicative" )
plot(tsm)
# 4 Realiza la grÃ¡fica de tendencia y coloca la grÃ¡fica de tendencia x estacionalidad superpuesta a esta
plot(datats, main="Consumo de energía eléctrica")
lines(tsm$seasonal*tsm$trend , col="red", lty=2, lwd=1)
lines(tsm$trend, col="blue", lty=1, lwd=2)
# Otra forma
ts.plot(cbind(tsm$trend,tsm$seasonal*tsm$trend), xlab = "Tiempo", main = "Datos de ProducciÃ³n de Electricidad",
ylab = "ProducciÃ³n de electricidad", lty = 1:2,
sub = "Tendencia con efectos estacionales multiplicativos sobrepuestos")
plot(tsm$seasonal*tsm$trend , col="red", lty=2, lwd=1)
lines(tsm$trend, col="blue", lty=1, lwd=2)
setwd("C:\Users\LLerma\Documents\GitHub\Data_Analysis\2. Programación y estadística con R\3. Análisis exploratorio de datos (AED o EDA) con R\Ejercicios\Files")
setwd("C:/Users/LLerma/Documents/GitHub/Data_Analysis/2. Programación y estadística con R/3. Análisis exploratorio de datos (AED o EDA) con R/Ejercicios/Files")
data <- read.csv("cbe.csv")
(datats <- ts(data$elec, start=1958, frequency=12))
start(datats); end(datats); frequency(datats)
tsm <- decompose(datats, type = "multiplicative" )
plot(tsm)
plot(datats, main="Consumo de energía eléctrica")
lines(tsm$seasonal*tsm$trend , col="red", lty=2, lwd=1)
lines(tsm$trend, col="blue", lty=1, lwd=2)
ts.plot(cbind(tsm$trend,tsm$seasonal*tsm$trend), xlab = "Tiempo", main = "Datos de ProducciÃ³n de Electricidad",
ylab = "ProducciÃ³n de electricidad", lty = 1:2,
sub = "Tendencia con efectos estacionales multiplicativos sobrepuestos")
plot(tsm$seasonal*tsm$trend , col="red", lty=2, lwd=1)
lines(tsm$trend, col="blue", lty=1, lwd=2)
library(dplyr) # Para usar el operador %>%
library(ggplot2)
data <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-con-R-2021/main/Sesion-03/Data/boxp.csv")
head(data)
names(data)
data2 <- mutate(data, Mediciones = Mediciones*1.23)
data3 <- mutate(data, Mediciones = Mediciones/1.23)
hist(data$Mediciones, breaks = seq(0,360, 20),  #Breakes es para el final del eje x
main = "Histograma de Mediciones",
xlab = "Mediciones",
ylab = "Frecuencia")
library(dplyr)
data <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-con-R-Santander/master/Sesion-03/Data/boxp.csv")
head(data)
names(data)
summary(data)
bien <- complete.cases(data)
data <- data[bien,]
data <- mutate(data, Categoria = factor(Categoria), Grupo = factor(Grupo))
library(dplyr)
data <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-con-R-Santander/master/Sesion-03/Data/boxp.csv")
head(data)
names(data)
summary(data)
bien <- complete.cases(data)
data <- data[bien,]
View(data)
bien2 <- na.omit(data)
View(data)
View(bien2)
setwd("C:/Users/LLerma/Documents/GitHub/Data_Analysis/2. Programación y estadística con R/3. Análisis exploratorio de datos (AED o EDA) con R/Ejercicios/Files")
mex <- read.csv("C19Mexico.csv")
head(mex); tail(mex)
mex <- mutate(mex, Fecha = as.Date(Fecha, "%Y-%m-%d"))
str(mex)
p <- ggplot(mex, aes(x=Fecha, y=Infectados)) +
geom_line( color="blue") +
geom_point() +
labs(x = "Fecha",
y = "Acumulado de casos confirmados",
title = paste("Confirmados de COVID-19 en MÃ©xico:",
format(Sys.time(),
tz="America/Mexico_City",
usetz=TRUE))) +
theme(plot.title = element_text(size=12))  +
theme(axis.text.x = element_text(face = "bold", color="#993333" ,
size = 10, angle = 45,
hjust = 1),
axis.text.y = element_text(face = "bold", color="#993333" ,
size = 10, angle = 45,
hjust = 1))  # color, Ã¡ngulo y estilo de las abcisas y ordenadas
library(scales)
p <- p  + scale_x_date(labels = date_format("%d-%m-%Y")) # paquete scales
p <- p +
theme(plot.margin=margin(10,10,20,10), plot.caption=element_text(hjust=1.05, size=10)) +
annotate("text", x = mex$Fecha[round(dim(mex)[1]*0.4)], y = max(mex$Infectados), colour = "blue", size = 5, label = paste("Ãltima actualizaciÃ³n: ", mex$Infectados[dim(mex)[1]]))
p
p <- ggplot(mex, aes(x=Fecha, y=NI)) +
geom_line(stat = "identity") +
labs(x = "Fecha", y = "Incidencia (NÃºmero de casos nuevos)",
title = paste("Casos de Incidencia de COVID-19 en MÃ©xico:",
format(Sys.time(),
tz="America/Mexico_City", usetz=TRUE))) +
theme(plot.title = element_text(size=12))  +
theme(axis.text.x = element_text(face = "bold", color="#993333" , size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(face = "bold", color="#993333" , size = 10, angle = 45, hjust = 1))  # color, Ãngulo y estilo de las abcisas y ordenadas
p <- p  + scale_x_date(labels = date_format("%d-%m-%Y")) # paquete scales
p
p <- p +
theme(plot.margin=margin(10,10,20,10), plot.caption=element_text(hjust=1.05, size=10)) +
annotate("text", x = mex$Fecha[round(dim(mex)[1]*0.4)], y = max(mex$NI), colour = "blue", size = 5,
label = paste("Ãltima actualizaciÃ³n: ", mex$NI[length(mex$NI)]))
p
mexm <- subset(mex, Muertos > 0) # Tomamos el subconjunto desde que comenzaron las muertes
p <- ggplot(mexm, aes(x=Fecha, y=Muertos)) + geom_line( color="red") +
geom_point() +
labs(x = "Fecha",
y = "Muertes acumuladas",
title = paste("Muertes por COVID-19 en MÃ©xico:", format(Sys.time(), tz="America/Mexico_City",usetz=TRUE))) +
theme(axis.text.x = element_text(face = "bold", color="#993333" , size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(face = "bold", color="#993333" , size = 10, angle = 45, hjust = 1))  # color, Ãngulo y estilo de las abcisas y ordenadas
p <- p  + scale_x_date(labels = date_format("%d-%m-%Y"))
p
p <- p +
theme(plot.margin=margin(10,10,20,10), plot.caption=element_text(hjust=1.05, size=10)) +
annotate("text", x = mexm$Fecha[round(dim(mexm)[1]*0.4)],
y = max(mexm$Muertos), colour = "red", size = 5, label = paste("Ãltima actualizaciÃ³n: ", mexm$Muertos[dim(mexm)[1]]))
p
# Muertes por DÃ­a
p <- ggplot(mexm, aes(x=Fecha, y=NM)) +
geom_line(stat = "identity") +
labs(x = "Fecha", y = "NÃºmero de nuevos decesos",
title = paste("Nuevos decesos por COVID-19 en MÃ©xico:",
format(Sys.time(), tz="America/Mexico_City",usetz=TRUE))) +
theme(plot.title = element_text(size=12)) +
theme(axis.text.x = element_text(face = "bold", color="#993333" , size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(face = "bold", color="#993333" , size = 10, angle = 45, hjust = 1))  # color, Ãngulo y estilo de las abcisas y ordenadas
p <- p  + scale_x_date(labels = date_format("%d-%m-%Y"))
###
p
p <- p +
theme(plot.margin=margin(10,10,20,10), plot.caption=element_text(hjust=1.05, size=10)) +
annotate("text", x = mexm$Fecha[round(dim(mexm)[1]*0.2)],
y = max(mexm$NM), colour = "red", size = 5, label = paste("Ãltima actualizaciÃ³n: ", mexm$NM[dim(mexm)[1]]))
p
# SuperposiciÃ³n de grÃ¡ficas
# Acumulado de Casos Confirmados y Muertes
p <- ggplot(mex, aes(x=Fecha, y=Infectados)) + geom_line(color="blue") +
labs(x = "Fecha",
y = "Acumulado de casos",
title = paste("COVID-19 en MÃ©xico:", format(Sys.time(), tz="America/Mexico_City",usetz=TRUE))) +
geom_line(aes(y = Muertos), color = "red") +
theme(axis.text.x = element_text(face = "bold", color="#993333" , size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(face = "bold", color="#993333" , size = 10, angle = 45, hjust = 1))  # color, Ãngulo y estilo de las abcisas y ordenadas
p <- p  + scale_x_date(labels = date_format("%d-%m-%Y"))
library(dplyr) # Para usar el operador %>%
library(plotly)
data <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-con-R-2021/main/Sesion-03/Reto-01/BD_Altura_Alunos.csv", sep =";")
hist(data$Altura, breaks = seq(140,200,3), col = "red", freq = T, #Igual que bin + 1
main = "Histograma de Altura",
xlab = "Mediciones",
ylab = "Altura")
data %>%
ggplot()+
aes(Altura) +
geom_histogram(bins=10 ,fill="#FFFF00", col="Black", alpha=0.5)+
theme_light()+
ggtitle("Altura")+
xlab("Altura")+
ylab("Cuenta")
library(ggplot2)
na <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-con-R-Santander/master/Sesion-03/Reto-02/players_stats.csv")
naom <- na.omit(na)
mnba=mean(na$MIN)
ggplot(na, aes(MIN)) + geom_histogram(binwidth=100, col="black") + geom_vline(xintercept = mnba) + xlab("Minutos") + ylab("Cuenta")
(mean_age=mean(na.omit(na$Age)))
ggplot(na, aes(Age)) + geom_histogram(binwidth=1, col="black") + geom_vline(aes(xintercept=mean_age))
ggplot(naom, aes(x = Weight, y = Height)) + geom_point()
cor(naom$Weight,naom$Height)
maxx<-which.max(naom$Height)
nom<-naom$Name[maxx]
alt<-naom$Height[maxx]
paste("El jugador mas alto es",  nom, "con una altura de ", alt*.01,"m")
minn<-which.min(naom$Height)
min_nom<-naom$Name[minn]
min_alt<-naom$Height[minn]
paste("El jugador mas bajo es",  min_nom, "con una altura de ", min_alt*.01,"m")
setwd("C:/Users/LLerma/Documents/GitHub/Data_Analysis/2. Programación y estadística con R/3. Análisis exploratorio de datos (AED o EDA) con R/Ejercicios/Files")
data <- read.csv("cbe.csv")
(datats <- ts(data$elec, start=1958, frequency=12))
start(datats); end(datats); frequency(datats)
tsm <- decompose(datats, type = "multiplicative" )
plot(tsm)
plot(datats, main="Consumo de energía eléctrica")
lines(tsm$seasonal*tsm$trend , col="red", lty=2, lwd=1)
lines(tsm$trend, col="blue", lty=1, lwd=2)
ts.plot(cbind(tsm$trend,tsm$seasonal*tsm$trend), xlab = "Tiempo", main = "Datos de ProducciÃ³n de Electricidad",
ylab = "ProducciÃ³n de electricidad", lty = 1:2,
sub = "Tendencia con efectos estacionales multiplicativos sobrepuestos")
plot(tsm$seasonal*tsm$trend , col="red", lty=2, lwd=1)
lines(tsm$trend, col="blue", lty=1, lwd=2)
View(mexm)
lines(mexm$Muertos)
lines(mexm$Muertos)
plot(mexm$Muertos)
str_replace(C:\Users\LLerma\Documents\GitHub\Data_Analysis\2. Programación y estadística con R\5. Regresión lineal y clasificación\Ejercicios\Files, \, /)
str_replace("C:\Users\LLerma\Documents\GitHub\Data_Analysis\2. Programación y estadística con R\5. Regresión lineal y clasificación\Ejercicios\Files", "\","/)
str_replace("C:\Users\LLerma\Documents\GitHub\Data_Analysis\2. Programación y estadística con R\5. Regresión lineal y clasificación\Ejercicios\Files", "\","/")
str_replace(C:\Users\LLerma\Documents\GitHub\Data_Analysis\2. Programación y estadística con R\5. Regresión lineal y clasificación\Ejercicios\Files, "\","/")
str_replace("C:\Users\LLerma\Documents\GitHub\Data_Analysis\2. Programación y estadística con R\5. Regresión lineal y clasificación\Ejercicios\Files", "\","/")
str_replace("C:\Users\LLerma\Documents\GitHub\Data_Analysis\2. Programación y estadística con R\5. Regresión lineal y clasificación\Ejercicios\Files", "/","\")
str_replace("C:\Users\LLerma\Documents\GitHub\Data_Analysis\2. Programación y estadística con R\5. Regresión lineal y clasificación\Ejercicios\Files", "/","-")
str_replace("C:\Users\LLerma\Documents\GitHub\Data_Analysis\2. Programación y estadística con R\5. Regresión lineal y clasificación\Ejercicios\Files", "\","-")
a <- C:\Users\LLerma\Documents\GitHub\Data_Analysis\2. Programación y estadística con R\5. Regresión lineal y clasificación\Ejercicios\Files
a <- "C:\Users\LLerma\Documents\GitHub\Data_Analysis\2. Programación y estadística con R\5. Regresión lineal y clasificación\Ejercicios\Files"
a <- "C:\Users\LLerma\Documents\GitHub\Data_Analysis\2. Programación y estadística con R\5. Regresión lineal y clasificación\Ejercicios\Files"
a = "oo"
a = "oo\"
a = "oo\ \kk"
a = "oo\ w\kk"
setwd("C:/Users/LLerma/Documents/GitHub/Data_Analysis/2. Programación y estadística con R/5. Regresión lineal y clasificación/Ejercicios/Files")
production <- read.table("production.txt", header = T)
(attach(production))
plot(RunSize, RunTime, xlab = "TamaÃ±o de ejecuciÃ³n",
ylab = "Tiempo de ejecuciÃ³n", pch = 16)
cor(RunSize, RunTime)
View(p)
View(production)
(m1 <- lm(RunTime~RunSize))
summary(m1) # Se usa para ver que tan confiable es el modelo
plot(RunSize, RunTime, xlab = "TamaÃ±o de ejecuciÃ³n",
ylab = "Tiempo de ejecuciÃ³n", pch = 16)
abline(lsfit(RunSize, RunTime)) # Trazamos la recta de regresiÃ³n estimada
mtext(expression(paste('Modelo de regresiÃ³n lineal simple:',' ',y[i] == beta[0] + beta[1]*x[i] + e[i])),
side = 3, adj=1, font = 2)
text(x = 200, y = 240, expression(paste('Recta de regresiÃ³n:',
' ',
y[i] == beta[0] + beta[1]*x[i])),
adj = 1, font = 2)
text(x = 350, y = 180, expression(paste('Recta estimada:',
' ',
hat(y)[i] == hat(beta)[0] + hat(beta)[1]*x[i])),
adj = 1, font = 2)
text(x = 350, y = 160, expression(paste('Recta estimada:',
' ',
hat(y)[i] == 149.74770 + 0.25924*x[i])),
adj = 1, font = 2)
points(189, 215, pch=16, col = "green") # Punto muestral
149.74770 + 0.25924 * 189 # Valor y sobre la recta estimada
lines(c(189, 189), c(198.7441, 215), col = "blue")
points(173, 166, pch=16, col = "red") # Punto muestral
149.74770 + 0.25924 * 173 # Valor y sobre la recta estimada
lines(c(173, 173), c(166, 194.5962), col = "red")
tval <- qt(1-0.05/2, 18)
tval
pt(tval, df = 18)
round(confint(m1, level = 0.95), 3)
RunSize0 <- c(50,100,150,200,250,300,350) # Algunos posibles valores de RunSize
(conf <- predict(m1, newdata =
data.frame(RunSize = RunSize0),
interval = "confidence", level = 0.99))
lines(RunSize0, conf[, 2], lty = 2, lwd = 2, col = "green") # lÃ­mites inferiores
lines(RunSize0, conf[, 3], lty = 2, lwd = 2, col = "green") # lÃ­mites superiores
(pred <- predict(m1, newdata =
data.frame(RunSize = RunSize0),
interval = "prediction", level = 0.99))
lines(RunSize0, pred[, 2], lty = 2, lwd = 2, col = "blue") # lÃ­mites inferiores
lines(RunSize0, pred[, 3], lty = 2, lwd = 2, col = "blue") # lÃ­mites superiores
anova(m1)
par(mfrow = c(2, 2))
plot(m1)
dev.off()
setwd("C:/Users/LLerma/Google Drive/Analisis de Datos/M2 - Programacion y Estadistica con R/S5/Files")
setwd("C:/Users/LLerma/Documents/GitHub/Data_Analysis/2. Programación y estadística con R/5. Regresión lineal y clasificación/Ejercicios/Files")
nyc <- read.csv("nyc.csv", header = TRUE)
head(nyc, 2); tail(nyc, 2); dim(nyc)
#detach(x)
attach(nyc)
(m1 <- lm(Price ~ Food + Decor + Service + East))
summary(m1)
m2 <- lm(Price ~ Food + Decor + East)
summary(m2)
m2 <- update(m1, ~.-Service)
summary(m2)
mfull <- lm(Price ~ Food + Decor + Service + East +
Food:East + Decor:East + Service:East)
summary(mfull)
summary(m2)
mfull <- lm(Price ~ Food + Decor + Service + East +
Food:East + Decor:East + Service:East)
summary(mfull)
anova(m2,mfull)
pairs(~ Food + Decor + Service, data = nyc, gap = 0.4, cex.labels = 1.5)
m1 <- lm(Price ~ Food + Decor + Service + East)
summary(m1)
StanRes1 <- rstandard(m1)
par(mfrow = c(2, 2))
plot(Food, StanRes1, ylab = "Residuales Estandarizados")
plot(Decor, StanRes1, ylab = "Residuales Estandarizados")
plot(Service, StanRes1, ylab = "Residuales Estandarizados")
plot(East, StanRes1, ylab = "Residuales Estandarizados")
dev.off()
plot(m1$fitted.values, Price, xlab = "Valores ajustados", ylab = "Price")
abline(lsfit(m1$fitted.values, Price))
abline(lsfit(m1$fitted.values, Price))
suppressMessages(suppressWarnings(library(dplyr)))
suppressMessages(suppressWarnings(library(e1071)))
suppressMessages(suppressWarnings(library(ggplot2)))
suppressMessages(suppressWarnings(library(ISLR)))
?Default
head(Default)
tail(Default)
dim(Default)
str(Default)
ggplot(Default, aes(x = balance, y = income, colour = default)) +
geom_point() + facet_wrap('student') +
theme_grey() + ggtitle("Datos Default")
set.seed(2020)
train = sample(nrow(Default),
round(nrow(Default)/2))
tail(Default[train, ])
ggplot(Default[train, ],
aes(x = balance, y = income, colour = default)) +
geom_point() + facet_wrap('student') +
theme_dark() + ggtitle("Conjunto de entrenamiento")
ggplot(Default[-train, ],
aes(x = balance, y = income, colour = default)) +
geom_point() + facet_wrap('student') +
theme_light() + ggtitle("Conjunto de prueba")
best <- svm(default~.,  data = Default[train,],
kernel = "radial",
cost = 100,
gamma = 1.51
)
mc <- table(true = Default[-train, "default"],
pred = predict(best,
newdata = Default[-train,]))
mc
round(sum(diag(mc))/sum(colSums(mc)), 5)
rs <- apply(mc, 1, sum)
r1 <- round(mc[1,]/rs[1], 5)
r2 <- round(mc[2,]/rs[2], 5)
rbind(No=r1, Yes=r2)
fit <- svm(default ~ ., data = Default[train,],
kernel = "radial", cost = 100, gamma = 1.51,
decision.values = TRUE)
fitted <- attributes(predict(fit, Default[-train,],
decision.values = TRUE))$decision.values
eti <- ifelse(fitted < 0, "Yes", "No")
mc <- table(true = Default[-train, "default"],
pred = eti)
mc
round(sum(diag(mc))/sum(colSums(mc)), 5)
rs <- apply(mc, 1, sum)
r1 <- round(mc[1,]/rs[1], 5)
r2 <- round(mc[2,]/rs[2], 5)
rbind(No=r1, Yes=r2)
eti <- ifelse(fitted < 1.002, "Yes", "No")
mc <- table(true = Default[-train, "default"],
pred = eti)
mc
round(sum(diag(mc))/sum(colSums(mc)), 5)
rs <- apply(mc, 1, sum)
r1 <- round(mc[1,]/rs[1], 5)
r2 <- round(mc[2,]/rs[2], 5)
rbind(No=r1, Yes=r2)
# install.packages("e1071") para instalarlo
library(e1071)
set.seed(754)
x <- matrix(rnorm(30*2), ncol = 2)
y <- c(rep(-1, 15), rep(1, 15))
x[y == 1, ] <- x[y == 1, ] + 1
plot(x, col = (3-y), pch = 16)
dat <- data.frame(x = x, y = as.factor(y))
tail(dat)
svmfit <- svm(y~., data = dat, kernel = "linear",
cost = 10, scale = FALSE)
plot(svmfit, dat)
svmfit$index
length(svmfit$index)
summary(svmfit)
svmfit <- svm(y~., data = dat, kernel = "linear",
cost = 0.1, scale = FALSE)
plot(svmfit, dat)
setwd("C:/Users/LLerma/Documents/GitHub/Data_Analysis/2. Programación y estadística con R/5. Regresión lineal y clasificación/Ejercicios/Files")
data <- read.csv("datoslineal.csv")
attach(data)
plot(x,y)
title("Correlación entre X y Y")
m1 <- lm(data)
m1$residuals
abline(lsfit(x, y))
par(mfrow = c(2, 2))
plot(m1)
plot(x,y)
data <- read.csv("datoslineal.csv")
attach(data)
View(data)
plot(x,y)
cls
clear
setwd("C:/Users/LLerma/Documents/GitHub/Data_Analysis/2. Programación y estadística con R/5. Regresión lineal y clasificación/Ejercicios/Files")
data <- read.csv("datoslineal.csv")
attach(data)
plot(x,y)
title("Correlación entre X y Y")
m1 <- lm(data)
View(m1)
m1$residuals
abline(lsfit(x, y))
par(mfrow = c(2, 2))
plot(m1)
summary(m1)
