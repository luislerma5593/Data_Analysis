str(iris)
unique(iris$Species)
summary(1:100)
summary(mtcars)
set.seed(57)
x <- rnorm(35)
e <- rnorm(35)
y <- 5 + 2*x + e
modelo <- lm(y~x)
summary(modelo)
head(mtcars)
tail(mtcars)
View(iris)
moda <- function(vector){
f.abs <- table(vector) # frecuencias absolutas
max.f.abs <- max(f.abs) # obtenemos la mÃ¡xima frecuencia absoluta
pos.max <- which(f.abs == max.f.abs) # posiciÃ³n(es) de la(s) mÃ¡xima(s) frecuencia(s) absoluta(s)
print("La(s) moda(s) es(son): ")
print(names(f.abs[pos.max]))
paste("Con una frecuencia de: ", unique(as.vector(f.abs[pos.max])))
}
x <- sample(1:30, 20, replace = T) # Tomamos una muestra aleatoria de tamaÃ±o 100 con reemplazo de los primeros 100 nÃºmeros naturales
table(x) # obtenemos las frecuencias absolutas de los valores de la muestra
moda(x) # obtenemos la moda de los valores de la muestra
library(ggplot2)
library(reshape2)
dbinom(x = 20, size = 30, prob = 0.2)
pbinom(q = 20, size = 30, prob = 0.2)
qbinom(p = 0.35, size = 30, prob = 0.2) # b = 5
pbinom(q = 4, size = 30, prob = 0.2) # P(X <= 4) = 0.2552 < 0.35
pbinom(q = 5, size = 30, prob = 0.2) # P(X <= 5) = 0.4275 >= 0.35
pbinom(q = 6, size = 30, prob = 0.2) # P(X <= 6) = 0.6070 >= 0.35
set.seed(4857) # Establecemos una semilla, para poder reproducir la muestra en el futuro
(muestra <- rbinom(n = 1000, size = 30, prob = 0.2))
length(muestra); muestra[1:3]
as.data.frame(table(muestra))
(df1 <- as.data.frame(table(muestra)/length(muestra)))
valg <- as.character(df1$muestra) # distintos valores generados por rbinom
(valg <- as.numeric(valg)) # Convertimos a nÃºmeros
(v1 <- round(sapply(valg, dbinom, size = 30, p = 0.2), 3))
(df2 <- cbind(df1, v1))
(names(df2) <- c("Exitos", "FR", "Prob"))
(df2 <- melt(df2)) # funciÃ³n del paquete reshape2
ggplot(df2, aes(x = Exitos, y = value, fill = variable)) +
geom_bar (stat="identity", position = "dodge") # Funciones del paquete ggplot2
x <- seq(-4, 4, 0.01)*6 + 175 # Algunos posibles valores que puede tomar la v.a. X (mÃ­nimo: mu-4sigma, mÃ¡ximo: mu+4sigma)
y <- dnorm(x, mean = 175, sd = 6) # Valores correspondientes de la funciÃ³n de densidad de probabilidad
plot(x, y, type = "l", xlab = "", ylab = "")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
abline(v = 175, lwd = 2, lty = 2) # La media es 175
pnorm(q = 180, mean = 175, sd = 6)
par(mfrow = c(2, 2))
plot(x, y, type = "l", xlab = "", ylab = "")
e
plot(e)
dev.off()
plot(e)
plot(table(e))
hist(e)
setwd("C:/Users/LLerma/Documents/GitHub/Data_Analysis/Proyecto/3. Procesamiento de datos Python/Files/")
a <- read.csv("m12.csv", header = TRUE)
View(a)
a$TapToTap
plot(a$TapToTap)
plot(tables(a$TapToTap))
plot(table(a$TapToTap))
plot(table(a$PowerOn))
source('C:/Users/LLerma/Google Drive/Analisis de Datos/Proyecto/2. R/Proyecto.R', echo=TRUE)
source('C:/Users/LLerma/Google Drive/Analisis de Datos/Proyecto/2. R/Proyecto.R', echo=TRUE)
plot(table(h1$PowerOn))
setwd("C:/Users/LLerma/Documents/GitHub/Data_Analysis/Proyecto/3. Procesamiento de datos Python/Files/")
a <- read.csv("m12.csv", header = TRUE)
plot(table(a$PowerOn))
a[a$ID ==1]
a[a$ID == 1]
library(dply)
h1 <- filter(a, a$ID == 1)
a1 <- filter(a, a$ID == 1)
a2 <- filter(a, a$ID == 2)
a1 <- filter(a, a$ID == 1)
a2 <- filter(a, a$ID == 2)
plot(table(a1$PowerOn))
plot(table(a2$PowerOn))
a2
plot(table(a1$PowerOn))
(a1$PowerOn)
mean(a1$PowerOn)
median(a1$PowerOn)
median(a2$PowerOn)
mean(a2$PowerOn)
library(ggplot2)
names(mtcars)
ggplot(mtcars, aes(x=cyl, y = hp, colour = mpg )) + geom_point() #Para puntos
names(mtcars)
p<-ggplot(mtcars, aes(x=cyl, y = hp, colour = mpg )) +
geom_point() +
theme_gray() +   # Temas (inteta cambiarlo)
facet_wrap("cyl")  # Lo divide por el nÃºm de cilindros
library(plotly)
cars<-mtcars
cars$name<-row.names(mtcars)
q<-ggplot(cars, aes(x=cyl, y = hp, colour = name )) +
geom_point() +
theme_gray() +   # Temas (inteta cambiarlo)
facet_wrap("cyl")
ggplotly(q) # Ya con los nombres
names(mtcars)
ggplot(mtcars, aes(x = cyl, y = hp, colour = mpg )) +
geom_point() +
theme_gray() +   # Temas (inteta cambiarlo)
facet_wrap("cyl") +  # Lo divide por el nÃºm de cilindros
xlab('Num de cilindros') +  # Nombre en los ejes
ylab('Caballos de Fuerza')
library(dplyr) # Para usar el operador %>%
library(ggplot2)
data <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-con-R-2021/main/Sesion-03/Data/boxp.csv")
head(data)
names(data)
data2 <- mutate(data, Mediciones = Mediciones*1.23)
data3 <- mutate(data, Mediciones = Mediciones/1.23)
hist(data$Mediciones, breaks = seq(0,360, 20),  #Breakes es para el final del eje x
main = "Histograma de Mediciones",
xlab = "Mediciones",
ylab = "Frecuencia")
hist(a1)
hist(a1$PowerOn)
hist(a1$PowerOn)
mean(a2$PowerOn, breaks = 30)
mean(a2$PowerOn)
hist(a1$PowerOn),breaks = 30)
hist(a1$PowerOn,breaks = 30)
hist(a1$PowerOn,breaks = 310)
hist(a1$PowerOn,breaks = 50)
hist(a2$PowerOn,breaks = 50)
hist(a2$PowerOn,breaks = 100)
hist(a1$PowerOn,breaks = 100)
library(dplyr) # Para usar el operador %>%
library(ggplot2)
data <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-con-R-2021/main/Sesion-03/Data/boxp.csv")
head(data)
names(data)
data2 <- mutate(data, Mediciones = Mediciones*1.23)
data3 <- mutate(data, Mediciones = Mediciones/1.23)
hist(data$Mediciones, breaks = seq(0,360, 20),  #Breakes es para el final del eje x
main = "Histograma de Mediciones",
xlab = "Mediciones",
ylab = "Frecuencia")
data <- na.omit(data)
data %>%
ggplot() +
aes(Mediciones) +
geom_histogram(binwidth = 20,col="red")
ggplot(data, aes(Mediciones)) + geom_histogram(binwidth = 20) #Para puntos
library(plotly)
ggplotly(g)
data %>%
ggplot() +
aes(Mediciones) +
geom_histogram(binwidth = 10, col="red", fill = "blue",position = "identity") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
theme_light()
#Clasic sin cuadrÃ­cula
library(ggplot2)
(my_scatplot <- ggplot(mtcars,
aes(x = wt, y = mpg)) +
geom_point())
(my_scatplot <- ggplot(mtcars,
aes(x=wt,y=mpg)) +
geom_point() +
geom_smooth(method = "lm", se = T))  # modelo lineal, cambia el parametro `se`, este hace referencia al intervalo de confianza
cor(mtcars$wt,mtcars$mpg)
my_scatplot + xlab('Weight (x 1000lbs)') + ylab('Miles per Gallon')
(my_scatplot <- ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) + geom_point())
my_scatplot + labs(x='Weight (x1000lbs)',y='Miles per Gallon',colour='Number of\n Cylinders')
my_scatplot + facet_wrap("cyl")
my_scatplot + facet_grid(am~cyl)
# Como puedes observar, hay muchas formas de representar el grÃ¡fico de dispersiÃ³n, Ã©stas son algunas de ellas, obviamente existen muchas mÃ¡s.
# Como puedes observar, hay muchas formas de representar el grÃ¡fico de dispersiÃ³n, Ã©stas son algunas de ellas, obviamente existen muchas mÃ¡s.
# Como puedes observar, hay muchas formas de representar el grÃ¡fico de dispersiÃ³n, Ã©stas son algunas de ellas, obviamente existen muchas mÃ¡s.
library(dplyr)
data <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-con-R-Santander/master/Sesion-03/Data/boxp.csv")
head(data)
names(data)
summary(data)
bien <- complete.cases(data)
data <- data[bien,]
data <- mutate(data, Categoria = factor(Categoria), Grupo = factor(Grupo))
ggplot(data, aes(x = Categoria, y = Mediciones, fill = Grupo)) + geom_boxplot() +
ggtitle("Boxplots") +
xlab("Categorias") +
ylab("Mediciones")
ggplot(a, aes(x = ID, y = PowerOn)) + geom_boxplot() +
ggtitle("Boxplots") +
xlab("Categorias") +
ylab("Mediciones")
names(a)
View(a)
ggplot(data, aes(x = TapToTap, y = PowerOn, fill = ID)) + geom_boxplot() +
ggtitle("Boxplots") +
xlab("Categorias") +
ylab("Mediciones")
ggplot(data, aes(x = ControlMode, y = PowerOn, fill = ID)) + geom_boxplot() +
ggtitle("Boxplots") +
xlab("Categorias") +
ylab("Mediciones")
ggplot(a, aes(x = ControlMode, y = PowerOn, fill = ID)) + geom_boxplot() +
ggtitle("Boxplots") +
xlab("Categorias") +
ylab("Mediciones")
h1_fil <- read.csv("h1_fil.csv", header = TRUE)
h2_fil <- read.csv("h2_fil.csv", header = TRUE)
hist(a1$PowerOn,breaks = 100)
hist(a1$PowerOn,breaks = 100)
hist(h1_fil$PowerOn,breaks = 100)
ggplot(a, aes(x = ControlMode, y = PowerOn, fill = ID)) + geom_boxplot() +
ggtitle("Boxplots") +
xlab("Categorias") +
ylab("Mediciones")
ggplot(h1_fil, aes(x = ControlMode, y = PowerOn, fill = ID)) + geom_boxplot() +
ggtitle("Boxplots") +
xlab("Categorias") +
ylab("Mediciones")
ggplot(h1_fil, aes(x = ControlMode, y = PowerOn)) + geom_boxplot() +
ggtitle("Boxplots") +
xlab("Categorias") +
ylab("Mediciones")
ggplot(h1, aes(x = ControlMode, y = PowerOn)) + geom_boxplot() +
ggtitle("Boxplots") +
xlab("Categorias") +
ylab("Mediciones")
hist(a2$PowerOn,breaks = 100)
hist(h2_fil$PowerOn,breaks = 100)
hist(a1$PowerOn,breaks = 100)
hist(h1_fil$PowerOn,breaks = 100)
hist(a2$PowerOn,breaks = 100)
hist(h2_fil$PowerOn,breaks = 100)
hist(a2$PowerOn,breaks = 100)
hist(a1$PowerOn)
library(ggplot2)
(my_scatplot <- ggplot(mtcars,
aes(x = wt, y = mpg)) +
geom_point())
(my_scatplot <- ggplot(mtcars,
aes(x=wt,y=mpg)) +
geom_point() +
geom_smooth(method = "lm", se = T))  # modelo lineal, cambia el parametro `se`, este hace referencia al intervalo de confianza
cor(mtcars$wt,mtcars$mpg)
my_scatplot + xlab('Weight (x 1000lbs)') + ylab('Miles per Gallon')
(my_scatplot <- ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) + geom_point())
my_scatplot + labs(x='Weight (x1000lbs)',y='Miles per Gallon',colour='Number of\n Cylinders')
my_scatplot + facet_wrap("cyl")
my_scatplot + facet_grid(am~cyl)
library(dplyr)
data <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-con-R-Santander/master/Sesion-03/Data/boxp.csv")
head(data)
names(data)
summary(data)
bien <- complete.cases(data)
data <- data[bien,]
data <- mutate(data, Categoria = factor(Categoria), Grupo = factor(Grupo))
ggplot(data, aes(x = Categoria, y = Mediciones, fill = Grupo)) + geom_boxplot() +
ggtitle("Boxplots") +
xlab("Categorias") +
ylab("Mediciones")
ggplot(data, aes(x = Categoria, y = Mediciones, fill = Grupo)) + geom_boxplot() +
scale_fill_discrete(name = "Dos Gps", labels = c("G1", "G2")) +
ggtitle("Boxplots") +
xlab("Categorias") +
ylab("Mediciones")
library(ggplot2)
library(dplyr)
# install.packages("scales")
library(scales) # Para mejorar la lectura de las etiquetas  en el eje de las x de tipo fecha
setwd("C:/Users/LLerma/Google Drive/Analisis de Datos/M2 - Programacion y Estadistica con R/S3/Files")
mex <- read.csv("C19Mexico.csv")
head(mex); tail(mex)
mex <- mutate(mex, Fecha = as.Date(Fecha, "%Y-%m-%d"))
str(mex)
p <- ggplot(mex, aes(x=Fecha, y=Infectados)) +
geom_line( color="blue") +
geom_point() +
labs(x = "Fecha",
y = "Acumulado de casos confirmados",
title = paste("Confirmados de COVID-19 en MÃ©xico:",
format(Sys.time(),
tz="America/Mexico_City",
usetz=TRUE))) +
theme(plot.title = element_text(size=12))  +
theme(axis.text.x = element_text(face = "bold", color="#993333" ,
size = 10, angle = 45,
hjust = 1),
axis.text.y = element_text(face = "bold", color="#993333" ,
size = 10, angle = 45,
hjust = 1))  # color, Ã¡ngulo y estilo de las abcisas y ordenadas
library(scales)
p <- p  + scale_x_date(labels = date_format("%d-%m-%Y")) # paquete scales
p <- p +
theme(plot.margin=margin(10,10,20,10), plot.caption=element_text(hjust=1.05, size=10)) +
annotate("text", x = mex$Fecha[round(dim(mex)[1]*0.4)], y = max(mex$Infectados), colour = "blue", size = 5, label = paste("Ãltima actualizaciÃ³n: ", mex$Infectados[dim(mex)[1]]))
p
p <- ggplot(mex, aes(x=Fecha, y=NI)) +
geom_line(stat = "identity") +
labs(x = "Fecha", y = "Incidencia (NÃºmero de casos nuevos)",
title = paste("Casos de Incidencia de COVID-19 en MÃ©xico:",
format(Sys.time(),
tz="America/Mexico_City", usetz=TRUE))) +
theme(plot.title = element_text(size=12))  +
theme(axis.text.x = element_text(face = "bold", color="#993333" , size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(face = "bold", color="#993333" , size = 10, angle = 45, hjust = 1))  # color, Ãngulo y estilo de las abcisas y ordenadas
p <- p  + scale_x_date(labels = date_format("%d-%m-%Y")) # paquete scales
p
p <- p +
theme(plot.margin=margin(10,10,20,10), plot.caption=element_text(hjust=1.05, size=10)) +
annotate("text", x = mex$Fecha[round(dim(mex)[1]*0.4)], y = max(mex$NI), colour = "blue", size = 5,
label = paste("Ãltima actualizaciÃ³n: ", mex$NI[length(mex$NI)]))
p
mexm <- subset(mex, Muertos > 0) # Tomamos el subconjunto desde que comenzaron las muertes
p <- ggplot(mexm, aes(x=Fecha, y=Muertos)) + geom_line( color="red") +
geom_point() +
labs(x = "Fecha",
y = "Muertes acumuladas",
title = paste("Muertes por COVID-19 en MÃ©xico:", format(Sys.time(), tz="America/Mexico_City",usetz=TRUE))) +
theme(axis.text.x = element_text(face = "bold", color="#993333" , size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(face = "bold", color="#993333" , size = 10, angle = 45, hjust = 1))  # color, Ãngulo y estilo de las abcisas y ordenadas
p <- p  + scale_x_date(labels = date_format("%d-%m-%Y"))
p
p <- p +
theme(plot.margin=margin(10,10,20,10), plot.caption=element_text(hjust=1.05, size=10)) +
annotate("text", x = mexm$Fecha[round(dim(mexm)[1]*0.4)],
y = max(mexm$Muertos), colour = "red", size = 5, label = paste("Ãltima actualizaciÃ³n: ", mexm$Muertos[dim(mexm)[1]]))
p
# Muertes por DÃ­a
p <- ggplot(mexm, aes(x=Fecha, y=NM)) +
geom_line(stat = "identity") +
labs(x = "Fecha", y = "NÃºmero de nuevos decesos",
title = paste("Nuevos decesos por COVID-19 en MÃ©xico:",
format(Sys.time(), tz="America/Mexico_City",usetz=TRUE))) +
theme(plot.title = element_text(size=12)) +
theme(axis.text.x = element_text(face = "bold", color="#993333" , size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(face = "bold", color="#993333" , size = 10, angle = 45, hjust = 1))  # color, Ãngulo y estilo de las abcisas y ordenadas
p <- p  + scale_x_date(labels = date_format("%d-%m-%Y"))
###
p
p <- p +
theme(plot.margin=margin(10,10,20,10), plot.caption=element_text(hjust=1.05, size=10)) +
annotate("text", x = mexm$Fecha[round(dim(mexm)[1]*0.2)],
y = max(mexm$NM), colour = "red", size = 5, label = paste("Ãltima actualizaciÃ³n: ", mexm$NM[dim(mexm)[1]]))
p
# SuperposiciÃ³n de grÃ¡ficas
# Acumulado de Casos Confirmados y Muertes
p <- ggplot(mex, aes(x=Fecha, y=Infectados)) + geom_line(color="blue") +
labs(x = "Fecha",
y = "Acumulado de casos",
title = paste("COVID-19 en MÃ©xico:", format(Sys.time(), tz="America/Mexico_City",usetz=TRUE))) +
geom_line(aes(y = Muertos), color = "red") +
theme(axis.text.x = element_text(face = "bold", color="#993333" , size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(face = "bold", color="#993333" , size = 10, angle = 45, hjust = 1))  # color, Ãngulo y estilo de las abcisas y ordenadas
p <- p  + scale_x_date(labels = date_format("%d-%m-%Y"))
p
p <- p +
theme(plot.margin=margin(10,10,20,10), plot.caption=element_text(hjust=1.05, size=10)) +
annotate("text", x = mex$Fecha[round(dim(mex)[1]*0.4)],
y = max(mex$Infectados), colour = "blue", size = 5, label = paste("Ãltima actualizaciÃ³n para Infectados:", mex$Infectados[dim(mex)[1]])) +
annotate("text", x = mex$Fecha[round(dim(mex)[1]*0.4)],
y = max(mex$Infectados)-100000, colour = "red", size = 5, label = paste("Ãltima actualizaciÃ³n para Muertes:", mex$Muertos[dim(mex)[1]]))
p
p <- ggplot(mexm, aes(x=Fecha, y=Letalidad)) + geom_line(color="red") +
labs(x = "Fecha",
y = "Tasa de letalidad",
title = paste("COVID-19 en MÃ©xico:", format(Sys.time(), tz="America/Mexico_City",usetz=TRUE))) +
theme(axis.text.x = element_text(face = "bold", color="#993333" , size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(face = "bold", color="#993333" , size = 10, angle = 45, hjust = 1)) + # color, Ãngulo y estilo de las abcisas y ordenadas
scale_y_discrete(name ="Tasa de letalidad",
limits=factor(seq(1, 13.5, 1)), labels=paste(seq(1, 13.5, 1), "%", sep = ""))
p <- p  + scale_x_date(labels = date_format("%d-%m-%Y"))
p <- p +
theme(plot.margin=margin(10,10,20,10), plot.caption=element_text(hjust=1.05, size=10)) +
annotate("text", x = mexm$Fecha[round(length(mexm$Fecha)*0.2)],
y = max(mexm$Letalidad)-1, colour = "red", size = 4, label = paste("Ãltima actualizaciÃ³n: ", mexm$Letalidad[dim(mexm)[1]], "%", sep = ""))
p
mex <- filter(mex, FCM < Inf) # Tomamos solo valores reales de factores de crecimiento
